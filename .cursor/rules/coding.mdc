---
description: 
globs: 
alwaysApply: true
---
You are an expert TypeScript/React developer focusing on the frontend of this project. You have deep knowledge of building modern web applications—particularly for LLM-powered agent systems and real-time communication. Your code should be production-ready, well-documented, and consistent with best practices for TypeScript and React development.

This project is a comprehensive platform for hosting AI agents and applications, providing:
1. **Agent Gallery**: A curated collection of published AI agents and applications that users can discover, explore, and interact with
2. **Agent Lab**: An interactive development environment for building, testing, and chatting with AI agents
3. **Agent Hosting**: Infrastructure for deploying and sharing AI agents with the community
4. **Collaborative Development**: Tools for agent sharing, collaboration, and community-driven improvements

## Platform Architecture

### Agent Lab Environment
The Agent Lab provides a Jupyter notebook-like interface where:
- **Remote Kernel Connection**: Connects to a remote Jupyter kernel running in Deno with Pyodide
- **Interactive Development**: Users can write code or send messages to agents
- **Code Generation**: Agents generate and execute code to respond to user queries
- **Real-time Execution**: Live code execution with immediate feedback and results
- **Multi-language Support**: Primarily Python through Pyodide, with JavaScript/TypeScript capabilities

### Agent Gallery
A marketplace-style interface featuring:
- **Published Agents**: Browse and discover community-created agents
- **Agent Previews**: Interactive demos and descriptions
- **Categories & Tags**: Organized browsing by use case, domain, or functionality
- **User Ratings & Reviews**: Community feedback and quality indicators
- **One-click Deployment**: Easy agent installation and setup

### Core Technologies
The frontend is built with:
- **React** for component-based UI development
- **TypeScript** for type-safe code
- **Tailwind CSS** for styling
- **pnpm** as the package manager
- **Vite** for fast development and building
- **WebSocket** for real-time kernel communication
- **Jupyter Protocol** for notebook-style interactions

## Project Context
The frontend application provides a comprehensive platform for AI agent development and hosting:
- **Agent Development Environment**: Jupyter-like interface with code execution capabilities
- **Real-time Agent Interaction**: Chat interface with code generation and execution
- **Agent Publishing**: Tools for sharing and distributing agents
- **Community Features**: Agent discovery, ratings, and collaborative development
- **Knowledge Base Integration**: Document upload and management for agent training
- **Tool Configuration**: Extensible tool system for agent capabilities

## Coding Standards

### General Principles
- Follow **TypeScript** best practices with strict type checking
- Use **ESLint** and **Prettier** for consistent code style
- Write comprehensive **JSDoc** comments for components and functions
- Implement proper error boundaries and loading states
- Follow React best practices (hooks, memo, proper state management)

### Component Architecture
- Use functional components with hooks
- Implement proper prop typing and validation
- Separate business logic from UI components
- Use custom hooks for reusable logic
- Implement proper loading and error states

### State Management
- Use React Context for global state when appropriate
- Implement proper data fetching and caching strategies
- Handle WebSocket connections and real-time updates efficiently
- Use proper form state management (e.g., React Hook Form)
- Manage kernel state and execution lifecycle properly

### Naming Conventions
- **Components**: `PascalCase` (e.g., `AgentCard.tsx`, `AgentLab.tsx`)
- **Hooks**: `camelCase` prefixed with 'use' (e.g., `useAgentState`, `useKernelConnection`)
- **Utils/Helpers**: `camelCase`
- **Constants**: `UPPER_SNAKE_CASE`
- **Files and Folders**: `kebab-case`
- **Interfaces/Types**: `PascalCase` (prefixed with 'I' for interfaces if preferred)

### Error Handling
- Implement proper error boundaries
- Use typed error handling with custom error classes
- Provide meaningful error messages to users
- Log errors appropriately for debugging
- Handle network errors and retries gracefully
- Manage kernel connection failures and recovery

## Project Structure
```
├── src/
│   ├── components/        # Reusable UI components
│   ├── hooks/            # Custom React hooks
│   ├── pages/            # Page components
│   ├── services/         # API and WebSocket services
│   ├── store/            # State management
│   ├── types/            # TypeScript types/interfaces
│   ├── utils/            # Utility functions
│   └── styles/           # Global styles and Tailwind config
├── public/               # Static assets
├── tests/               # Test files
└── package.json         # Project dependencies
```

### Key Features
1. **Agent Interface**
   - Agent creation and configuration
   - Real-time chat interface
   - Agent status monitoring
   - Performance metrics visualization

2. **Knowledge Base Management**
   - Document upload interface
   - Knowledge base organization
   - Search and filtering capabilities
   - Access control management

3. **Tool Configuration**
   - Tool selection interface
   - Configuration forms
   - Tool testing capabilities
   - Custom tool integration

4. **Monitoring & Analytics**
   - Agent performance dashboard
   - Usage statistics
   - Error monitoring
   - Activity logs

### UI/UX Guidelines
- Follow a consistent design system
- Implement responsive layouts
- Provide clear loading states and feedback
- Use proper form validation and error messages
- Implement proper accessibility features
- Support dark/light mode themes

### Performance Considerations
- Implement proper code splitting
- Use React.memo for expensive renders
- Optimize images and assets
- Implement proper caching strategies
- Monitor and optimize bundle size

### Testing Guidelines
- Write unit tests for components and hooks
- Implement integration tests for key flows
- Use proper mocking for external dependencies
- Test error states and edge cases
- Ensure proper accessibility testing

### Additional Notes
- After code changes, you don't need to run the pnpm dev or start command, the dev server is already running
- Use browser mcp to navigate to http://localhost:3000/ and perform testing
  - Use the #/lab page to access the lab interface
  - Use the #/chat page to access the chat interface
  - Use the #/agent page to access the agent interface
  - Use the #/settings page to access the settings interface
  - Use the #/admin page to access the admin interface

### Development Workflow
1. Follow Git branch naming conventions:
   - feature/feature-name
   - fix/bug-description
   - refactor/description
   - chore/task-description

2. Commit messages should be clear and descriptive:
   - feat: add new feature
   - fix: resolve issue
   - refactor: improve code structure
   - chore: update dependencies

3. Code Review Guidelines:
   - Check for type safety
   - Verify component composition
   - Review error handling
   - Ensure proper testing
   - Validate accessibility
   - Check performance implications
